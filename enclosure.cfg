## This uses an extra controler (a voron klipper expander in my case) to 
# control fans in a passive enclosure. Adapt for your needs.
# Features a cooldown TSR that continues to cool/filter the enclosure 
# until the bed is below 40C


[mcu expander]
serial: /dev/serial/by-id/usb-Klipper_stm32f042x6_070036001443303054313620-if00
# dfu 0483:df11
restart_method: command

#Mosfets (PA0, PA1, PA2, PA3)
#I2C Header (PF0, PF1)
#Thermistors (PA5, PA6)
#Neopixel header (PB1)
#SWD header (PA13, PA14, RST)
#GPIO (PA7)

[fan_generic filter]
off_below: 0.1
pin: expander:PA0
#heater_temp: 40.0
#fan_speed: 0.75
#shutdown_speed: 1
#heater: heater_bed

[fan_generic exhaust]
off_below: 0.3
pin: expander:PA1
#heater: extruder
#heater_temp: 40
#fan_speed: 0.5
shutdown_speed: 1


[gcode_macro SET_ENCLOSURE]
description: use parameters ENABLE=1 to enable fan/printlight management. ON=1 for normal use, ON=0 or OFF=1 for instantant off COOLDOWN=1 for temperatue based cooldown. PREHEAT=1 for accelerated warmup.
gcode:
    {% set svv = printer.save_variables.variables %}


    {% if (params.ENABLE|default(-1)|int > 0) %}
      SAVE_VARIABLE VARIABLE=enclosure_enable VALUE=1
      { action_respond_info("ENABLED") }
    {% endif %}
    {% if (params.ENABLE|default(-1)|int == 0) %}
        SAVE_VARIABLE VARIABLE=enclosure_enable VALUE=0
        SET_FAN_SPEED FAN=filter SPEED=0
        SET_FAN_SPEED FAN=exhaust SPEED=0
        { action_respond_info("DISABELD") }
    {% endif %}
    
    ; turn off
    {% if ((params.ON|default(-1)|int == 0) or (params.OFF|default(-1)|int > 0)) %}
      SET_FAN_SPEED FAN=filter SPEED=0
      SET_FAN_SPEED FAN=exhaust SPEED=0
      SAVE_VARIABLE VARIABLE=enclosure_cooldown VALUE=0
      { action_respond_info("Fans off") }
    {% endif %}
    
    ; turn on if we can
    {% if ((params.ON|default(-1)|int > 0) and (svv.enclosure_enable > 0)) %}
        SET_FAN_SPEED FAN=filter SPEED={svv.enclosure_filterspeed} ;wtf
        { action_respond_info("Filter on") }
        SET_FAN_SPEED FAN=exhaust SPEED={svv.enclosure_exhaustspeed}
        { action_respond_info("Exhaust on") }
        # Disable existing cooldown timers
        SAVE_VARIABLE VARIABLE=enclosure_cooldown VALUE=0
    {% endif %}
    
    ; warmup if we can
    {% if ((params.PREHEAT|default(-1)|int > 0) and (svv.enclosure_enable > 0)) %}
      SET_FAN_SPEED FAN=filter SPEED={svv.enclosure_filterspeed}
      ; SET_FAN_SPEED FAN=exhaust SPEED={svv.enclosure_exhaustspeed}
      SAVE_VARIABLE VARIABLE=enclosure_cooldown VALUE=0
      { action_respond_info("Warmup Active") }
    {% endif %}
    
     ; cooldown if we can
    {% if (params.COOLDOWN|default(-1)|int > 0) and (svv.enclosure_enable > 0) %}
      SET_FAN_SPEED FAN=filter SPEED={svv.enclosure_filterspeed}
      SET_FAN_SPEED FAN=exhaust SPEED={svv.enclosure_exhaustspeed}
      SAVE_VARIABLE VARIABLE=enclosure_cooldown VALUE=1
      UPDATE_DELAYED_GCODE ID=enclosure_cooldown DURATION=30
      { action_respond_info("Cooldown active") }
    {% endif %}
    
    ; cooldown off
    {% if (params.COOLDOWN|default(-1)|int == 0) %}
      SAVE_VARIABLE VARIABLE=enclosure_cooldown VALUE=0
      { action_respond_info("Cooldown disabled, fans may still be running") }
    {% endif %}
    
    {% if ('enabled' in params|lower) %}
      { action_respond_info("Use ENABLE=1 to use enclosure cooling") }
    {% endif%}

    {% if ('query' in params|lower ) %}
      { action_respond_info("ENABLE: " + svv.enclosure_enable|string ) }
      { action_respond_info("COOLDOWN: " + svv.enclosure_cooldown|string ) }
      { action_respond_info("EXHAUST: " + svv.enclosure_exhaustspeed|string ) }
      { action_respond_info("FILTER: " + svv.enclosure_filterspeed|string ) }
    {% endif%}

[gcode_macro _ENCLOSURE_COOLDOWN_WATCHDOG]
description: checks every 30 seconds to see if the bed and extruder are below TARGET temperature,
variable_target: 40
variable_cycles: 0
gcode:
    {% set svv = printer.save_variables.variables %}
    {% if ((svv.enclosure_cooldown > 0) and (svv.enclosure_enable > 0)) %}
        {% set my_target = params.TARGET|default(target)|float %}
        SET_GCODE_VARIABLE MACRO=_ENCLOSURE_COOLDOWN_WATCHDOG VARIABLE=target VALUE={my_target}
        {% if cycles < 1 %}
             { action_respond_info("Fans will stop when bed cools to " + my_target|string +"C") }
        {% endif %}

        SET_GCODE_VARIABLE MACRO=_ENCLOSURE_COOLDOWN_WATCHDOG VARIABLE=cycles VALUE={cycles + 1}
        {% if printer.heater_bed.temperature < my_target %}
            SAVE_VARIABLE VARIABLE=enclosure_cooldown VALUE=0
            SET_ENCLOSURE off=1
            { action_respond_info("Bed has cooled below " + my_target|string +"C") }
            #{ action_respond_info("Alarm performed " + cycles|string +" cycles") } #debug
            #SET_GCODE_VARIABLE MACRO=_ENCLOSURE_COOLDOWN_WATCHDOG VARIABLE=target VALUE=40
            SET_GCODE_VARIABLE MACRO=_ENCLOSURE_COOLDOWN_WATCHDOG VARIABLE=cycles VALUE=0
            M117 Enclosure Cool
        {% else %}
            UPDATE_DELAYED_GCODE ID=enclosure_cooldown DURATION=30
        {% endif %}
      {% else %}
         { action_respond_info("Cooldown disabled") }
     {% endif %}
    

    
    
 
[delayed_gcode enclosure_cooldown]
gcode:
    _ENCLOSURE_COOLDOWN_WATCHDOG

[delayed_gcode enclosure_startup]
initial_duration: 5
gcode:
    {% if  ((svv.enclosure_cooldown > 0) and (svv.enclosure_enable > 0))  %}
        { action_respond_info("COOLDOWN set active") }
        SET_FAN_SPEED FAN=filter SPEED={svv.enclosure_filterspeed}
        SET_FAN_SPEED FAN=exhaust SPEED={svv.enclosure_exhaustspeed}
    {% endif %}
    _ENCLOSURE_COOLDOWN_WATCHDOG
 














